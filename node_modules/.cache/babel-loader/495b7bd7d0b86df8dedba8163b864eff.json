{"ast":null,"code":"var _excluded = [\"children\", \"className\", \"innerRef\", \"x\", \"y\", \"width\", \"height\", \"radius\", \"all\", \"top\", \"bottom\", \"left\", \"right\", \"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport cx from 'classnames';\n/** Hook that returns a BarRounded path. */\n\nexport function useBarRoundedPath(_ref) {\n  var all = _ref.all,\n      bottom = _ref.bottom,\n      bottomLeft = _ref.bottomLeft,\n      bottomRight = _ref.bottomRight,\n      height = _ref.height,\n      left = _ref.left,\n      radius = _ref.radius,\n      right = _ref.right,\n      top = _ref.top,\n      topLeft = _ref.topLeft,\n      topRight = _ref.topRight,\n      width = _ref.width,\n      x = _ref.x,\n      y = _ref.y;\n  topRight = all || top || right || topRight;\n  bottomRight = all || bottom || right || bottomRight;\n  bottomLeft = all || bottom || left || bottomLeft;\n  topLeft = all || top || left || topLeft; // clamp radius to center of shortest side of the rect\n\n  radius = Math.max(1, Math.min(radius, Math.min(width, height) / 2));\n  var diameter = 2 * radius;\n  var path = (\"M\" + (x + radius) + \",\" + y + \" h\" + (width - diameter) + \"\\n \" + (topRight ? \"a\" + radius + \",\" + radius + \" 0 0 1 \" + radius + \",\" + radius : \"h\" + radius + \"v\" + radius) + \"\\n v\" + (height - diameter) + \"\\n \" + (bottomRight ? \"a\" + radius + \",\" + radius + \" 0 0 1 \" + -radius + \",\" + radius : \"v\" + radius + \"h\" + -radius) + \"\\n h\" + (diameter - width) + \"\\n \" + (bottomLeft ? \"a\" + radius + \",\" + radius + \" 0 0 1 \" + -radius + \",\" + -radius : \"h\" + -radius + \"v\" + -radius) + \"\\n v\" + (diameter - height) + \"\\n \" + (topLeft ? \"a\" + radius + \",\" + radius + \" 0 0 1 \" + radius + \",\" + -radius : \"v\" + -radius + \"h\" + radius) + \"\\nz\").split('\\n').join('');\n  return path;\n}\nexport default function BarRounded(_ref2) {\n  var children = _ref2.children,\n      className = _ref2.className,\n      innerRef = _ref2.innerRef,\n      x = _ref2.x,\n      y = _ref2.y,\n      width = _ref2.width,\n      height = _ref2.height,\n      radius = _ref2.radius,\n      _ref2$all = _ref2.all,\n      all = _ref2$all === void 0 ? false : _ref2$all,\n      _ref2$top = _ref2.top,\n      top = _ref2$top === void 0 ? false : _ref2$top,\n      _ref2$bottom = _ref2.bottom,\n      bottom = _ref2$bottom === void 0 ? false : _ref2$bottom,\n      _ref2$left = _ref2.left,\n      left = _ref2$left === void 0 ? false : _ref2$left,\n      _ref2$right = _ref2.right,\n      right = _ref2$right === void 0 ? false : _ref2$right,\n      _ref2$topLeft = _ref2.topLeft,\n      topLeft = _ref2$topLeft === void 0 ? false : _ref2$topLeft,\n      _ref2$topRight = _ref2.topRight,\n      topRight = _ref2$topRight === void 0 ? false : _ref2$topRight,\n      _ref2$bottomLeft = _ref2.bottomLeft,\n      bottomLeft = _ref2$bottomLeft === void 0 ? false : _ref2$bottomLeft,\n      _ref2$bottomRight = _ref2.bottomRight,\n      bottomRight = _ref2$bottomRight === void 0 ? false : _ref2$bottomRight,\n      restProps = _objectWithoutPropertiesLoose(_ref2, _excluded);\n\n  var path = useBarRoundedPath({\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    radius: radius,\n    all: all,\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    topLeft: topLeft,\n    topRight: topRight,\n    bottomLeft: bottomLeft,\n    bottomRight: bottomRight\n  });\n  if (children) return /*#__PURE__*/React.createElement(React.Fragment, null, children({\n    path: path\n  }));\n  return /*#__PURE__*/React.createElement(\"path\", _extends({\n    ref: innerRef,\n    className: cx('visx-bar-rounded', className),\n    d: path\n  }, restProps));\n}","map":null,"metadata":{},"sourceType":"module"}