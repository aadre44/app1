{"ast":null,"code":"var _excluded = [\"x\", \"x0\", \"x1\", \"y\", \"y1\", \"y0\", \"yScale\", \"data\", \"defined\", \"className\", \"curve\", \"innerRef\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport cx from 'classnames';\nimport setNumOrAccessor from '../util/setNumberOrNumberAccessor';\nimport { area } from '../util/D3ShapeFactories';\nexport default function AreaClosed(_ref) {\n  var x = _ref.x,\n      x0 = _ref.x0,\n      x1 = _ref.x1,\n      y = _ref.y,\n      y1 = _ref.y1,\n      y0 = _ref.y0,\n      yScale = _ref.yScale,\n      _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data,\n      _ref$defined = _ref.defined,\n      defined = _ref$defined === void 0 ? function () {\n    return true;\n  } : _ref$defined,\n      className = _ref.className,\n      curve = _ref.curve,\n      innerRef = _ref.innerRef,\n      children = _ref.children,\n      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var path = area({\n    x: x,\n    x0: x0,\n    x1: x1,\n    defined: defined,\n    curve: curve\n  });\n\n  if (y0 == null) {\n    /**\n     * by default set the baseline to the first element of the yRange\n     * @TODO take the minimum instead?\n     */\n    path.y0(yScale.range()[0]);\n  } else {\n    setNumOrAccessor(path.y0, y0);\n  }\n\n  if (y && !y1) setNumOrAccessor(path.y1, y);\n  if (y1 && !y) setNumOrAccessor(path.y1, y1);\n  if (children) return /*#__PURE__*/React.createElement(React.Fragment, null, children({\n    path: path\n  }));\n  return /*#__PURE__*/React.createElement(\"path\", _extends({\n    ref: innerRef,\n    className: cx('visx-area-closed', className),\n    d: path(data) || ''\n  }, restProps));\n}","map":null,"metadata":{},"sourceType":"module"}